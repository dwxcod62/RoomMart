(function(n) {
    n.CacheManager = function(n, t) {
        function r(n, t) {
            let r = {};
            return (!n || (r.autoExpire = !0, r.expireInMinutes = n), !t || (r.storage = t), Object.keys(r).length == 0) ? i : Object.assign({}, i, r)
        }

        function u(n, t) {
            return n.prefix ? (window.enableDebugLog && console.log("correct cache key", n.prefix + t), n.prefix + t) : (window.enableDebugLog && console.log("correct cache key", t), t || "empty-cache-key")
        }

        function o(n, t) {
            if (!t) return window.enableDebugLog && console.log("empty cacheItem"), !1;
            const r = t[i.wrapper.expireProp];
            return !!r && new Date(r).getTime() >= (new Date).getTime() ? (window.enableDebugLog && console.log("cache is valid"), !0) : (window.enableDebugLog && console.log("cache status", !n.autoExpire), !n.autoExpire)
        }

        function s(n, t, r) {
            if (window.enableDebugLog && console.log("get cache", t), !n.active || !n.storage) return f(n, t, r);
            const s = n.storage.getItem(u(n, t));
            if (!s) return f(n, t, r);
            const e = JSON.parse(s);
            return (window.enableDebugLog && console.log("got cacheItem", e), o(n, e)) ? (window.enableDebugLog && console.log("cache hit", e[i.wrapper.valueProp]), e[i.wrapper.valueProp]) : f(n, t, r)
        }

        function f(n, t, i) {
            if (i == null) return window.enableDebugLog && console.log("fallback is null"), null;
            var r = typeof i == "function" ? i() : i;
            return r == null ? (window.enableDebugLog && console.log("result of fallback is null"), null) : (window.enableDebugLog && console.log("set fallback data as cache", r), e(n, t, r), r)
        }

        function e(n, t, r) {
            if (window.enableDebugLog && console.log("set cache", t, "data", r), r && n.active && n.storage) {
                const e = new Date,
                    f = {};
                if (f[i.wrapper.valueProp] = r, f[i.wrapper.lastUpdateProp] = e, n.autoExpire) {
                    const t = new Date(e.getTime() + n.expireInMinutes * 6e4);
                    f[i.wrapper.expireProp] = t
                }
                window.enableDebugLog && console.log("set cacheItem", f);
                n.storage.setItem(u(n, t), JSON.stringify(f))
            }
        }

        function l(n, t, i) {
            return config = r(i), s(config, n, t)
        }

        function a(n, t, i) {
            config = r(i);
            e(config, n, t)
        }

        function v(n, t, i) {
            window.enableDebugLog && console.log("change cache value", n);
            config = r(i);
            const f = s(config, n),
                u = t(f);
            return e(config, n, u), u
        }

        function y(n) {
            !i.storage || i.storage.removeItem(u(i, n))
        }

        function p() {
            !i.storage || i.storage.clear()
        }

        function w() {
            var t, n;
            for (window.enableDebugLog && console.log("cleanup running"), t = 0; t < i.storage.length;)
                if (n = i.storage.key(t++), n) {
                    if (!n.startsWith(i.prefix) && !n.startsWith("banner:")) {
                        window.enableDebugLog && console.log("unmanaged cache", n);
                        continue
                    }
                    const r = i.storage.getItem(n);
                    if (!r) {
                        window.enableDebugLog && console.log("empty cache data", n);
                        continue
                    }
                    const u = JSON.parse(r);
                    if (o(i, u)) {
                        window.enableDebugLog && console.log("cache still valid", n);
                        continue
                    }
                    i.storage.removeItem(n);
                    t--;
                    window.enableDebugLog && console.log("cache cleaned", n)
                }
            window.enableDebugLog && console.log("cleanup completed")
        }
        const h = n.sessionStorage,
            c = n.localStorage,
            i = Object.assign({
                active: !0,
                storage: null,
                autoExpire: !0,
                expireInMinutes: 1440,
                prefix: "con.",
                wrapper: {
                    valueProp: "value",
                    lastUpdateProp: "__lastUpdate",
                    expireProp: "__expire"
                }
            }, t || {});
        return i.storage || (i.storage = c || h), i.storage || (i.active = !1), {
            getConfig: () => Object.assign({}, i),
            get: l,
            set: a,
            change: v,
            remove: y,
            clear: p,
            cleanup: w
        }
    }
})(window),
function(n, t) {
    var i = n.CacheManager(n, t);
    i.createNewInstance = n.CacheManager;
    n.cacheHelper = i;
    setTimeout(i.cleanup, 3e4)
}(window, window.cacheConfig);